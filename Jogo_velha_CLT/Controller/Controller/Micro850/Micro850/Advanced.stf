PROGRAM Advanced
R_TRIG_2(Reset);
R_TRIG_3(onePlayer);
IF R_TRIG_2.Q OR R_TRIG_3.Q THEN
	FOR aux_count := 0 TO 8 BY 1 DO
		board[aux_count] := '';
		END_FOR;
END_IF;
	
R_TRIG_1(jogador_o);
IF R_TRIG_1.Q AND NOT Ganhou_o AND NOT Ganhou_x  AND onePlayer THEN	
	player_out := -10000;
	FOR aux_count := 0 TO 8 BY 1 DO
		aux_board := board;
		IF aux_board[aux_count] <> 'X' AND aux_board[aux_count] <> 'O' THEN
			aux_board[aux_count] := 'O';
			evaluatePosition_1(aux_board, 'O');
			out_aux := evaluatePosition_1.out;
			worst := -1000;
			FOR aux_count2 := 0 TO 8 BY 1 DO
				aux_board2:=aux_board;
				IF aux_board2[aux_count2] <> 'X' AND aux_board2[aux_count2] <> 'O' THEN
					aux_board2[aux_count2] := 'X';
					evaluatePosition_2(aux_board2, 'X');
					tmp := evaluatePosition_2.out;
					IF tmp > worst THEN
						worst := tmp;
					END_IF;
				END_IF;
			END_FOR;
			out_aux := out_aux - worst;
			
			IF out_aux > player_out THEN
				player_out := out_aux;
				play_pos := aux_count;
			END_IF;
		END_IF;
		
	END_FOR;
	
	board[play_pos] := 'O';
	
	CASE play_pos OF
	0: btn[1,1] := TRUE;
		
	1: btn[1,2]:= TRUE;
	
	2: btn[1,3]:= TRUE;
	
	3: btn[2,1]:= TRUE;

	4: btn[2,2]:= TRUE;

	5: btn[2,3]:= TRUE;
	
	6: btn[3,1]:= TRUE;
	
	7: btn[3,2]:= TRUE;
	
	8: btn[3,3]:= TRUE;
	ELSE

	END_CASE;
	
		
END_IF;
END_PROGRAM